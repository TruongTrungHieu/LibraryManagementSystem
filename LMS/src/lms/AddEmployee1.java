/*
 * AddEmployee1.java
 *
 * Created on June 20, 2016, 4:19 PM
 */
package lms;

import DatabaseWorker.ExecuteQuery;
import Objects.Books;
import Objects.Categories;
import Objects.Employees;
import Objects.Permission;
import Objects.Publishers;
import Support.SQLFileConfigHanlder;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.util.ArrayList;
import java.util.Calendar;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Duc Anh
 */
public class AddEmployee1 extends javax.swing.JFrame {

    // ManagerEmployee me;
    DefaultComboBoxModel dcbm;
    private Employees employee;
    private ExecuteQuery exeQ;
    private ArrayList<Employees> listemployee;
    private ArrayList<Permission> listPermission;
    private DefaultTableModel model;
    private Employees empUpdate;

    /**
     * Creates new form AddEmployee1
     */
    public AddEmployee1() {

        initComponents();
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        Dimension ds = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation((ds.width - this.getWidth()) / 2, (ds.height - this.getHeight()) / 2);
        initData();
        loadView();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        txt_name = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txt_address = new javax.swing.JTextArea();
        txt_phone = new javax.swing.JTextField();
        txt_email = new javax.swing.JTextField();
        txt_username = new javax.swing.JTextField();
        cb_per = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbl_employee = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        bt_add_emp = new javax.swing.JButton();
        bt_Add1 = new javax.swing.JButton();
        bt_update = new javax.swing.JButton();
        btn_del = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Add  Employees", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bodoni MT", 1, 24), new java.awt.Color(0, 0, 255))); // NOI18N
        jPanel1.setForeground(new java.awt.Color(204, 255, 255));

        txt_address.setColumns(20);
        txt_address.setRows(5);
        jScrollPane1.setViewportView(txt_address);

        tbl_employee.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Address", "Phone", "Email", "Permission", "Username"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbl_employee.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_employeeMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tbl_employee);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Employee Name");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Phone Number");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Email");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Permission");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Username");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("Address");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1)
                            .addComponent(jLabel6)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                            .addComponent(txt_name))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txt_username, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cb_per, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txt_email, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txt_phone, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 521, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_phone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txt_email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cb_per, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txt_username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(jLabel6)
                        .addGap(10, 10, 10)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)))
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        bt_add_emp.setFont(new java.awt.Font("Bodoni MT", 1, 14)); // NOI18N
        bt_add_emp.setForeground(new java.awt.Color(0, 102, 255));
        bt_add_emp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/EDIT_ADD.PNG"))); // NOI18N
        bt_add_emp.setText("Add");
        bt_add_emp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_add_empActionPerformed(evt);
            }
        });

        bt_Add1.setFont(new java.awt.Font("Bodoni MT", 1, 14)); // NOI18N
        bt_Add1.setForeground(new java.awt.Color(0, 102, 255));
        bt_Add1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/reload_32.png"))); // NOI18N
        bt_Add1.setText("Refresh");
        bt_Add1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_Add1ActionPerformed(evt);
            }
        });

        bt_update.setFont(new java.awt.Font("Bodoni MT", 1, 14)); // NOI18N
        bt_update.setForeground(new java.awt.Color(0, 102, 255));
        bt_update.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/package_editors.png"))); // NOI18N
        bt_update.setText("Update");
        bt_update.setEnabled(false);
        bt_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_updateActionPerformed(evt);
            }
        });

        btn_del.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btn_del.setForeground(new java.awt.Color(51, 51, 255));
        btn_del.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Delete.png"))); // NOI18N
        btn_del.setText("Xóa");
        btn_del.setEnabled(false);
        btn_del.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_delActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(40, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btn_del, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bt_update, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bt_add_emp, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bt_Add1)
                        .addGap(31, 31, 31))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bt_add_emp, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bt_Add1)
                    .addComponent(bt_update, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_del, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel1.getAccessibleContext().setAccessibleName("Manage  Employees");
        jPanel1.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bt_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_updateActionPerformed
        // TODO add your handling code here:
        if (checkValidateUpdate()) {
            if (exeQ.updateEmployee(empUpdate)) {
                JOptionPane.showMessageDialog(this, empUpdate.getEmployeeName() + " updated successfully !");

                listemployee = new ArrayList<>();
                listemployee = exeQ.getAllEmployee();
                DefaultTableModel model1;
                model1 = (DefaultTableModel) this.tbl_employee.getModel();
                model1.setRowCount(0);
                listemployee.stream().forEach((b) -> {
                    model1.addRow(new Object[]{b.getEmployeeName(), b.getAddress(), b.getPhoneNumber(), b.getEmail(), b.getPermission().getPermissionName(), b.getUsername()});
                });
                tbl_employee = new JTable(model1);
                
                refresh();
            }
        }

    }//GEN-LAST:event_bt_updateActionPerformed

    private void bt_add_empActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_add_empActionPerformed
        if (checkValidate()) {
            if (exeQ.insertEmployee(employee)) {
                
                JOptionPane.showMessageDialog(this, employee.getEmployeeName() + " inserted successful !");
                listemployee.add(employee);

                model.setRowCount(0);
                
                listemployee.stream().forEach((b) -> {
                    model.addRow(new Object[]{b.getEmployeeName(), b.getAddress(), b.getPhoneNumber(), b.getEmail(), b.getPermission().getPermissionName(),b.getUsername()});
                });
                tbl_employee = new JTable(model);
                refresh();
            } else {
                JOptionPane.showMessageDialog(this, "Something wrong, please try again !");
            }
        }
    }//GEN-LAST:event_bt_add_empActionPerformed

    private void tbl_employeeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_employeeMouseClicked
        int row = tbl_employee.rowAtPoint(evt.getPoint());
        int col = tbl_employee.columnAtPoint(evt.getPoint());
        if (row >= 0 && col >= 0) {
            bt_update.setEnabled(true);
            btn_del.setEnabled(true);
            empUpdate = listemployee.get(row);

            txt_name.setText(empUpdate.getEmployeeName());
            txt_address.setText(empUpdate.getAddress());
            txt_phone.setText(empUpdate.getPhoneNumber());
            txt_email.setText(empUpdate.getEmail());
            for (int i = 0; i < listPermission.size(); ++i) {
                if (listPermission.get(i).getPermissionID().equals(empUpdate.getPermission().getPermissionID())) {
                    cb_per.setSelectedIndex(i);
                    break;
                }
            }
            txt_username.setText(empUpdate.getUsername());

        }
    }//GEN-LAST:event_tbl_employeeMouseClicked

    private void bt_Add1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_Add1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bt_Add1ActionPerformed

    private void btn_delActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_delActionPerformed
        if (checkValidateUpdate()) {
            if (exeQ.deleteEmployee(empUpdate)) {
                JOptionPane.showMessageDialog(this, empUpdate.getEmployeeName() + " deleted successfully !");

                listemployee = new ArrayList<>();
                listemployee = exeQ.getAllEmployee();
                DefaultTableModel model1;
                model1 = (DefaultTableModel) this.tbl_employee.getModel();
                model1.setRowCount(0);
                listemployee.stream().forEach((b) -> {
                    model1.addRow(new Object[]{b.getEmployeeName(), b.getAddress(), b.getPhoneNumber(), b.getEmail(), b.getPermission().getPermissionName(), b.getUsername()});
                });
                tbl_employee = new JTable(model1);
                
                refresh();
            }
        }
    }//GEN-LAST:event_btn_delActionPerformed
    /**
     *
     * check whether an employee has valid before insert into database
     *
     * @param evt
     */

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                //new AddEmployee(me).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bt_Add1;
    private javax.swing.JButton bt_add_emp;
    private javax.swing.JButton bt_update;
    private javax.swing.JButton btn_del;
    private javax.swing.JComboBox<String> cb_per;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tbl_employee;
    private javax.swing.JTextArea txt_address;
    private javax.swing.JTextField txt_email;
    private javax.swing.JTextField txt_name;
    private javax.swing.JTextField txt_phone;
    private javax.swing.JTextField txt_username;
    // End of variables declaration//GEN-END:variables

    private void initData() {
        exeQ = ExecuteQuery.getInstance();

        listemployee = new ArrayList<>();
        listemployee = exeQ.getAllEmployee();

        listPermission = new ArrayList<>();
        listPermission = exeQ.getAllPermission();

        model = (DefaultTableModel) this.tbl_employee.getModel();

    }

    private void loadView() {
        if (listemployee != null) {
            DefaultTableModel model;
            model = (DefaultTableModel) this.tbl_employee.getModel();
            model.setRowCount(0);
            listemployee.stream().forEach((b) -> {
                model.addRow(new Object[]{b.getEmployeeName(), b.getAddress(), b.getPhoneNumber(), b.getEmail(), b.getPermission().getPermissionName(), b.getUsername()});
            });
            tbl_employee = new JTable(model);
        }

        if (listPermission != null) {
            listPermission.stream().forEach((c) -> {
                cb_per.addItem(c.getPermissionName());
            });
        }
    }

    private void refresh() {
        txt_name.setText("");
        txt_address.setText("");
        txt_email.setText("");
        txt_phone.setText("");
        txt_username.setText("");
        cb_per.setSelectedIndex(0);
    }

    private boolean checkValidate() {
        employee = new Employees();
        employee.setEmployeeID(Calendar.getInstance().getTimeInMillis() + "");

        if (txt_name.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Name can't be empty !");
            return false;
        } else {
            employee.setEmployeeName(txt_name.getText().trim());
        }

        if (txt_address.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Andress can't be empty !");
            return false;
        } else {
            employee.setAddress(txt_address.getText().trim());
        }

        if (txt_phone.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Phone can't be empty !");
            return false;
        } else {
            employee.setPhoneNumber(txt_phone.getText().trim());
        }

        if (txt_email.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Email can't be empty !");
            return false;
        } else {
            employee.setEmail(txt_email.getText().trim());
        }

        if (txt_username.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Username can't be empty !");
            return false;
        } else {
            employee.setUsername(txt_username.getText().trim());
        }
        System.out.println(cb_per.getSelectedIndex());
        employee.setPermission(listPermission.get(cb_per.getSelectedIndex()));

        return true;
    }

    private boolean checkValidateUpdate() {

        if (empUpdate.getEmployeeID().isEmpty()) {
            return false;
        }
        
        if (txt_name.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Name can't be empty !");
            return false;
        } else {
            empUpdate.setEmployeeName(txt_name.getText().trim());
        }

        if (txt_address.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Andress can't be empty !");
            return false;
        } else {
            empUpdate.setAddress(txt_address.getText().trim());
        }

        if (txt_phone.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Phone can't be empty !");
            return false;
        } else {
            empUpdate.setPhoneNumber(txt_phone.getText().trim());
        }

        if (txt_email.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Email can't be empty !");
            return false;
        } else {
            empUpdate.setEmail(txt_email.getText().trim());
        }

        if (txt_username.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Username can't be empty !");
            return false;
        } else {
            empUpdate.setUsername(txt_username.getText().trim());
        }
        empUpdate.setPermission(listPermission.get(cb_per.getSelectedIndex()));

        return true;
    }
}

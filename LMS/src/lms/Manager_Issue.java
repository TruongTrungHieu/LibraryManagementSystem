/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lms;

import DatabaseWorker.ExecuteQuery;
import Objects.Books;
import Objects.Issue;
import Objects.IssueDetail;
import Objects.Readers;
import Support.DatetimeUtils;
import Support.Global;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author TriDung
 */
public class Manager_Issue extends javax.swing.JFrame {

    /**
     * Creates new form Manager_Issue
     */
    private ArrayList<Books> listBook;
    private ExecuteQuery exeQ;
    private ArrayList<IssueDetail> listBookChoosed;
    private ArrayList<Readers> listReader;
    private Readers readers;
    private DefaultTableModel model_issue_detail;
    private Issue issue;

    public Manager_Issue() {
        initComponents();
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        Dimension ds = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation((ds.width - this.getWidth()) / 2, (ds.height - this.getHeight()) / 2);
        initData();
        loadView();

        tf_phoneNumber.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent de) {
                searchReader(tf_phoneNumber.getText());
            }

            @Override
            public void removeUpdate(DocumentEvent de) {
                searchReader(tf_phoneNumber.getText());
            }

            @Override
            public void changedUpdate(DocumentEvent de) {
                searchReader(tf_phoneNumber.getText());
            }

        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_allBook = new javax.swing.JTable();
        tf_readerName = new javax.swing.JTextField();
        tf_issueDate = new javax.swing.JTextField();
        tf_dueDate = new javax.swing.JTextField();
        tf_phoneNumber = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbl_issuedetail = new javax.swing.JTable();
        tf_employeeName = new javax.swing.JTextField();
        btn_create_issue = new javax.swing.JButton();
        btn_refresh = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tbl_allBook.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Titile", "Author"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbl_allBook.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_allBookMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbl_allBook);

        tf_readerName.setEditable(false);
        tf_readerName.setText("Name");
        tf_readerName.setToolTipText("");

        tf_issueDate.setEditable(false);
        tf_issueDate.setText("Issue Date");
        tf_issueDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_issueDateActionPerformed(evt);
            }
        });

        tf_dueDate.setText("(dd/MM/yyyy)");

        tf_phoneNumber.setText("Phone Number");
        tf_phoneNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_phoneNumberActionPerformed(evt);
            }
        });

        tbl_issuedetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Book Name", "Author", "Number"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbl_issuedetail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_issuedetailMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tbl_issuedetail);

        tf_employeeName.setEditable(false);

        btn_create_issue.setText("Create");
        btn_create_issue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_create_issueActionPerformed(evt);
            }
        });

        btn_refresh.setText("Refresh");
        btn_refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_refreshActionPerformed(evt);
            }
        });

        jLabel1.setText("Employee:");

        jLabel2.setText("Reader:");

        jLabel5.setText("Date:");

        jLabel6.setText("Issue Date");

        jLabel7.setText("Due Date");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(tf_employeeName, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btn_refresh)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(btn_create_issue))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel5))
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(tf_issueDate, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tf_readerName, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tf_dueDate, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tf_phoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7)))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 449, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(tf_employeeName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(tf_readerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5)
                                    .addComponent(tf_issueDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel6))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tf_phoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(tf_dueDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel7)))
                        .addGap(26, 26, 26)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn_create_issue)
                            .addComponent(btn_refresh)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tf_issueDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_issueDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_issueDateActionPerformed

    private void tbl_allBookMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_allBookMouseClicked
        // TODO add your handling code here:
        int row = tbl_allBook.rowAtPoint(evt.getPoint());
        int col = tbl_allBook.columnAtPoint(evt.getPoint());
        if (row >= 0 && col >= 0) {
            Books b = listBook.get(row);
            int idx = -1;
            boolean isExisted = false;
            for (int i = 0; i < listBookChoosed.size(); ++i) {
                IssueDetail is = listBookChoosed.get(i);
                if (is.getBook().getBookID().equals(b.getBookID())) {
                    isExisted = true;
                    idx = i;
                    break;
                }
            }
            if (isExisted) {
                listBookChoosed.get(idx).setNumber(listBookChoosed.get(idx).getNumber() + 1);
            } else {
                IssueDetail issueDetail = new IssueDetail();
                issueDetail.setBook(b);
                issueDetail.setNumber(1);
                listBookChoosed.add(issueDetail);
            }
            loadIssueDetailTAble();
        }
    }//GEN-LAST:event_tbl_allBookMouseClicked

    private void tf_phoneNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_phoneNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_phoneNumberActionPerformed

    private void btn_create_issueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_create_issueActionPerformed
        // TODO add your handling code here:
        if (checkValidate()) {
            if (!exeQ.insertIssueAndDetail(issue, listBookChoosed)) {
                JOptionPane.showMessageDialog(this, "Something wrong ! Please try again.");
            } else {
                JOptionPane.showMessageDialog(this, "Success");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Invalid");
        }

    }//GEN-LAST:event_btn_create_issueActionPerformed

    private void btn_refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_refreshActionPerformed
        // TODO add your handling code here:
        readers = new Readers();
        listBookChoosed.clear();
        model_issue_detail.setRowCount(0);
        tf_readerName.setText("Name");
        tf_phoneNumber.setText("Phone Number");
        tf_dueDate.setText("dd/MM/yyyy");
    }//GEN-LAST:event_btn_refreshActionPerformed

    private void tbl_issuedetailMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_issuedetailMouseClicked
        // TODO add your handling code here:
        int row = tbl_allBook.rowAtPoint(evt.getPoint());
        int col = tbl_allBook.columnAtPoint(evt.getPoint());
        if (row >= 0 && col >= 0) {
            IssueDetail is = listBookChoosed.get(row);
            if (is.getNumber() == 1) {
                listBookChoosed.remove(row);
            } else {
                listBookChoosed.get(row).setNumber(listBookChoosed.get(row).getNumber() - 1);
            }
        }
        loadIssueDetailTAble();

    }//GEN-LAST:event_tbl_issuedetailMouseClicked

    private boolean checkValidate() {
        issue = new Issue();
        if (Global.Employee.getEmployeeID().isEmpty()) {
            return false;
        } else {
            issue.setEmployee(Global.Employee);
        }

        if (readers.getReaderID().isEmpty()) {
            return false;
        } else {
            issue.setReader(readers);
        }

        issue.setIssueID(Calendar.getInstance().getTimeInMillis() + "");
        issue.setIssueDate(new Date());
        issue.setStatus(Global.ISSUE_STATUS_BORROWING);
        issue.setTotalFine(0);

        if (tf_dueDate.getText().isEmpty() || tf_dueDate.getText().equals("dd/MM/yyyy")) {
            return false;
        } else {
            issue.setDueDate(DatetimeUtils.convertStringToDate(tf_dueDate.getText(), "dd/MM/yyyy"));
        }

        if (listBookChoosed == null || listBookChoosed.size() == 0) {
            return false;
        }

        return true;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Manager_Issue.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Manager_Issue.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Manager_Issue.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Manager_Issue.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Manager_Issue().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_create_issue;
    private javax.swing.JButton btn_refresh;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tbl_allBook;
    private javax.swing.JTable tbl_issuedetail;
    private javax.swing.JTextField tf_dueDate;
    private javax.swing.JTextField tf_employeeName;
    private javax.swing.JTextField tf_issueDate;
    private javax.swing.JTextField tf_phoneNumber;
    private javax.swing.JTextField tf_readerName;
    // End of variables declaration//GEN-END:variables

    private void initData() {
        model_issue_detail = (DefaultTableModel) this.tbl_issuedetail.getModel();
        exeQ = ExecuteQuery.getInstance();
        listBook = new ArrayList<>();
        listBook = exeQ.getAllBooks();
        listBookChoosed = new ArrayList<>();
        listReader = exeQ.getAllReaders();
    }

    private void loadIssueDetailTAble() {
        model_issue_detail.setRowCount(0);
        if (listBookChoosed != null) {
            listBookChoosed.stream().forEach((b) -> {
                model_issue_detail.addRow(new Object[]{b.getBook().getTitle(), b.getBook().getAuthorName(), b.getNumber()});
            });
            tbl_issuedetail = new JTable(model_issue_detail);
        }
    }

    private void loadView() {
        if (listBook != null) {
            DefaultTableModel model;
            model = (DefaultTableModel) this.tbl_allBook.getModel();
            listBook.stream().forEach((b) -> {
                model.addRow(new Object[]{b.getTitle(), b.getAuthorName()});
            });
            tbl_allBook = new JTable(model);
        }
        tf_employeeName.setText(Global.Employee.getEmployeeName());
        loadIssueDetailTAble();
        tf_issueDate.setText(DatetimeUtils.convertDateToString(new Date(), DatetimeUtils.DATE_FORMAT_2));
    }

    private void searchReader(String phone) {
        for (Readers r : listReader) {
            if (r.getPhoneNumber().equals(phone)) {
                readers = r;
                tf_readerName.setText(r.getReaderName());
                break;
            } else {
                tf_readerName.setText("Reader Name");
                readers = new Readers();
            }
        }
    }
}
